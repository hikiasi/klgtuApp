{"version":3,"file":"infinity-circle-progress-1a0860ea.js","sources":["../../src/shared/ui/core/atoms/circle-progress/circle-progress.tsx","../../src/shared/ui/core/atoms/circle-progress/infinity-circle-progress.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport type TCircleProgress = {\n  size?: number,\n  progress: number,\n  indicatorWidth?: number,\n  spinnerSpeed?: number,\n}\n\nexport const CircleProgress = ({\n  size = 48,\n  progress = 50,\n  spinnerSpeed = 1,\n  indicatorWidth = 5,\n}: TCircleProgress) => {\n  const trackWidth = indicatorWidth\n  const center = size / 2\n  const radius = center - (trackWidth > indicatorWidth ? trackWidth : indicatorWidth)\n  const dashArray = 2 * Math.PI * radius\n  const dashOffset = dashArray * ((100 - progress) / 100)\n  return (\n    <Wrapper>\n      <SvgWrapper size={size}>\n        <Track\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={trackWidth}\n        />\n        <Indicator\n          cx={center}\n          cy={center}\n          r={radius}\n          spinnerSpeed={spinnerSpeed}\n          strokeWidth={indicatorWidth}\n          strokeDasharray={dashArray}\n          strokeDashoffset={dashOffset}\n        />\n      </SvgWrapper>\n    </Wrapper>\n  );\n};\n\n\nconst Wrapper = styled.div`\n\n`\n\ntype TSvgWrapper = Required<Pick<TCircleProgress, 'size'>>\n\nconst SvgWrapper = styled.svg<TSvgWrapper>`\n  width: ${({ size }) => `${size}px`};\n  height: ${({ size }) => `${size}px`};\n  transform: rotate(-90deg);\n`\n\ntype TIndicator = Required<Pick<TCircleProgress, 'spinnerSpeed'>>\nconst Indicator = styled.circle<TIndicator>`\n  fill: transparent;\n  stroke-width: 4px;\n  stroke: ${({ theme: { palette } }) => palette.accent.primary_500};\n  animation-duration: ${({ spinnerSpeed }) => spinnerSpeed * 1000};\n`\nconst Track = styled.circle`\n  fill: transparent;\n  stroke-width: 4px;\n  stroke: transparent;\n`\n","import { useEffect, useState } from \"react\";\nimport { CircleProgress } from \".\";\nimport { TCircleProgress } from \"./circle-progress\";\n\ntype TInfinityCircleProgress = Pick<TCircleProgress, 'size' | 'spinnerSpeed' | 'indicatorWidth'>\n\nexport const InfinityCircleProgress = (props: TInfinityCircleProgress) => {\n  const [progress, setProgress] = useState(0)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (progress < 100) {\n        setProgress(progress + 1)\n      }\n      else {\n        setProgress(0)\n      }\n    }, 10);\n    return () => clearInterval(interval)\n  }, [progress])\n  return (\n    <CircleProgress\n      progress={progress}\n      {...props}\n    />\n  )\n}\n"],"names":["CircleProgress","size","progress","spinnerSpeed","indicatorWidth","trackWidth","center","radius","dashArray","dashOffset","jsx","Wrapper","jsxs","SvgWrapper","Track","Indicator","styled","palette","InfinityCircleProgress","props","setProgress","useState","useEffect","interval"],"mappings":"sJASO,MAAAA,EAAA,CAAA,CAAwB,KAAAC,EAAA,GACtB,SAAAC,EAAA,GACI,aAAAC,EAAA,EACI,eAAAC,EAAA,CAEjB,IAAA,CACE,MAAAC,EAAAD,EACAE,EAAAL,EAAA,EACAM,EAAAD,GAAAD,EAAAD,EAAAC,EAAAD,GACAI,EAAA,EAAA,KAAA,GAAAD,EACAE,EAAAD,IAAA,IAAAN,GAAA,KACA,OAAAQ,EAAA,IAAAC,EAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,CAAA,KAAAZ,EAAA,SAAA,CAGMS,EAAA,IAAAI,EAAC,CAAA,GAAAR,EACK,GAAAA,EACA,EAAAC,EACD,YAAAF,CACU,CAAA,EACfK,EAAA,IACAK,EAAC,CAAA,GAAAT,EACK,GAAAA,EACA,EAAAC,EACD,aAAAJ,EACH,YAAAC,EACa,gBAAAI,EACI,iBAAAC,CACC,CAAA,CACpB,CAAA,CAAA,CAAA,CAAA,CAIR,EAGAE,EAAAK,EAAA;AAAA;AAAA,EAMAH,EAAAG,EAAA;AAAA,WAA0B,CAAA,CAAA,KAAAf,CAAA,IAAA,GAAAA;AAAA,YACE,CAAA,CAAA,KAAAA,CAAA,IAAA,GAAAA;AAAA;AAAA,EAM5Bc,EAAAC,EAAA;AAAA;AAAA;AAAA,YAAyB,CAAA,CAAA,MAAA,CAAA,QAAAC,CAAA,CAAA,IAAAA,EAAA,OAAA;AAAA,wBAG8B,CAAA,CAAA,aAAAd,KAAAA,EAAA;AAAA,EAGvDW,EAAAE,EAAA;AAAA;AAAA;AAAA;AAAA,+gBCzDO,MAAAE,EAAAC,GAAA,CACL,KAAA,CAAAjB,EAAAkB,CAAA,EAAAC,EAAA,SAAA,CAAA,EACAC,OAAAA,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAA,YAAA,IAAA,CACErB,EAAA,IACEkB,EAAAlB,EAAA,CAAA,EAGAkB,EAAA,CAAA,CACF,EAAA,EAAA,EAEF,MAAA,IAAA,cAAAG,CAAA,CAAmC,EAAA,CAAArB,CAAA,CAAA,EAErCQ,EAAA,IACEV,EAAC,CAAA,SAAAE,EACC,GAAAiB,CACI,CAAA,CAGV"}