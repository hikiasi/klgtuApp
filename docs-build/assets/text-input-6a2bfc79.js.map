{"version":3,"file":"text-input-6a2bfc79.js","sources":["../../src/shared/ui/core/molecules/input/text-input.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { ChangeEvent, MouseEvent, ReactNode, forwardRef, useRef, useState } from \"react\";\nimport { IconsList, TIconsList } from \"../../atoms\";\n\nexport type TTextInput = {\n  value?: string,\n  placeholder?: string,\n  icon?: TIconsList,\n  onChange: (e: string) => void,\n  disabled?: boolean,\n  button?: ReactNode,\n  width?: number\n}\n\nexport const TextInput = forwardRef<HTMLDivElement, TTextInput>(({\n  value = '',\n  placeholder,\n  onChange,\n  disabled = false,\n  icon,\n  button,\n  width,\n  ...props\n}, ref) => {\n  const inputRef = useRef<HTMLInputElement>(null)\n  const buttonRef = useRef<HTMLDivElement>(null)\n  const [focus, setFocus] = useState(false)\n  const event = (e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault\n    if (disabled)\n      return\n    onChange(e.target.value)\n  }\n  const onFocus = () => {\n    setFocus(true)\n  }\n  const onBlur = () => {\n    setFocus(false)\n  }\n  const wrapperClick = (e: MouseEvent<HTMLDivElement>) => {\n    //possibly there can be some problems\n    if (disabled || buttonRef.current?.contains(e.target as Node)) {\n      return\n    }\n    inputRef.current?.focus()\n  }\n  return (\n    <Wrapper\n      onClick={wrapperClick}\n      isActive={focus}\n      isDisable={disabled}\n      isText={!!inputRef.current?.value}\n      width={width}\n      ref={ref}\n      {...props}\n    >\n      {icon && IconsList[icon]}\n      <CustomInput\n        placeholder={placeholder}\n        value={value}\n        type=\"text\"\n        onChange={event}\n        ref={inputRef}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        disabled={disabled}\n      />\n      {button && (\n        <ButtonWrapper ref={buttonRef}>\n          {button}\n        </ButtonWrapper>\n      )}\n    </Wrapper >\n  );\n});\n\ntype TWrapper = {\n  isActive: boolean,\n  isDisable: boolean,\n  isText: boolean,\n  width?: number,\n}\n\nconst Wrapper = styled.div<TWrapper>`\n  width: ${({ width }) => width}px;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 8px;\n  padding: 11px 16px;\n  border: 1.5px solid ${({ theme: { palette }, isActive, isDisable }) => {\n    let color = isActive ?\n      palette.accent.primary_500\n      :\n      palette.content.cnt_100\n    if (isDisable) {\n      color = palette.background.bg_250\n    }\n    return color\n  }};\n  border-radius: 8px;\n  cursor: pointer;\n  box-shadow: 0px 0px 0px 2px ${({ theme: { palette }, isActive }) => isActive ? palette.accent.primary_500_op12 : 'none'};\n  & > svg {\n    height: 20px;\n    width: 20px;\n    min-height: 20px;\n    min-width: 20px;\n  };\n  & > svg path {\n    fill: ${({ theme: { palette }, isActive, isDisable, isText }): string => {\n    let bg = palette.content.cnt_100\n    if (isActive || isText) {\n      bg = palette.content.cnt_000\n    }\n    if (isDisable) {\n      bg = palette.background.bg_250\n    }\n    return bg\n  }};\n  }\n`\n\nconst CustomInput = styled.input`\n  width: 100%;\n  height: auto;\n  background: transparent;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  caret-color: ${({ theme: { palette } }) => palette.accent.primary_500};\n  ${({ theme: { typography } }) => typography.footnote};\n  font-size: ${({ theme: { typography } }) => typography.footnote.size};\n  &::placeholder {\n    color: ${({ theme: { palette } }) => palette.content.cnt_100};\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  width: auto;\n`\n"],"names":["TextInput","forwardRef","value","placeholder","onChange","disabled","icon","button","width","props","ref","inputRef","useRef","buttonRef","focus","setFocus","useState","event","e","onFocus","onBlur","wrapperClick","_a","_b","jsxs","Wrapper","IconsList","jsx","CustomInput","ButtonWrapper","styled","palette","isActive","isDisable","color","isText","bg","typography"],"mappings":"uVAcO,MAAAA,EAAAC,EAAA,WAAA,CAAA,CAA0D,MAAAC,EAAA,GACvD,YAAAC,EACR,SAAAC,EACA,SAAAC,EAAA,GACW,KAAAC,EACX,OAAAC,EACA,MAAAC,EACA,GAAAC,CAEF,EAAAC,IAAA,OACE,MAAAC,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EACA,CAAAE,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,GAAA,CACEA,EAAA,eACA,CAAAb,GAEAD,EAAAc,EAAA,OAAA,KAAA,CAAuB,EAEzBC,EAAA,IAAA,CACEJ,EAAA,EAAA,CAAa,EAEfK,EAAA,IAAA,CACEL,EAAA,EAAA,CAAc,EAEhBM,EAAAH,GAAA,SAEEb,IAAAiB,EAAAT,EAAA,UAAA,MAAAS,EAAA,SAAAJ,EAAA,UAGAK,EAAAZ,EAAA,UAAA,MAAAY,EAAA,OAAwB,EAE1B,OAAAC,EAAA,KACEC,EAAC,CAAA,QAAAJ,EACU,SAAAP,EACC,UAAAT,EACC,OAAA,CAAA,GAAAiB,EAAAX,EAAA,UAAA,MAAAW,EAAA,OACiB,MAAAd,EAC5B,IAAAE,EACA,GAAAD,EACI,SAAA,CAEHH,GAAAoB,EAAApB,CAAA,EAAsBqB,EAAA,IACvBC,EAAC,CAAA,YAAAzB,EACC,MAAAD,EACA,KAAA,OACK,SAAAe,EACK,IAAAN,EACL,QAAAQ,EACL,OAAAC,EACA,SAAAf,CACA,CAAA,EACFE,GAAAoB,EAAA,IAAAE,EAAA,CAAA,IAAAhB,EAAA,SAAAN,EAAA,CAIE,CAAA,CAAA,CAIR,CAAA,EASAkB,EAAAK,EAAA;AAAA,WAAuB,CAAA,CAAA,MAAAtB,CAAA,IAAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACG,CAAA,CAAA,MAAA,CAAA,QAAAuB,CAAA,EAAA,SAAAC,EAAA,UAAAC,KAAA,CAOtB,IAAAC,EAAAF,EAAAD,EAAA,OAAA,YAAAA,EAAA,QAAA,QAIA,OAAAE,IACEC,EAAAH,EAAA,WAAA,QAEFG,CACF;AAAA;AAAA;AAAA,gCAAA,CAAA,CAAA,MAAA,CAAA,QAAAH,GAAA,SAAAC,KAAAA,EAAAD,EAAA,OAAA,iBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAGiH,CAAA,CAAA,MAAA,CAAA,QAAAA,CAAA,EAAA,SAAAC,EAAA,UAAAC,EAAA,OAAAE,KAAA,CAS/G,IAAAC,EAAAL,EAAA,QAAA,QACA,OAAAC,GAAAG,KACEC,EAAAL,EAAA,QAAA,SAEFE,IACEG,EAAAL,EAAA,WAAA,QAEFK,CACF;AAAA;AAAA,EAIFR,EAAAE,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA2B,CAAA,CAAA,MAAA,CAAA,QAAAC,CAAA,CAAA,IAAAA,EAAA,OAAA;AAAA,IAQiC,CAAA,CAAA,MAAA,CAAA,WAAAM,CAAA,CAAA,IAAAA,EAAA;AAAA,eACd,CAAA,CAAA,MAAA,CAAA,WAAAA,CAAA,CAAA,IAAAA,EAAA,SAAA;AAAA;AAAA,aACoB,CAAA,CAAA,MAAA,CAAA,QAAAN,CAAA,CAAA,IAAAA,EAAA,QAAA;AAAA;AAAA,EAMlEF,EAAAC,EAAA;AAAA;AAAA"}