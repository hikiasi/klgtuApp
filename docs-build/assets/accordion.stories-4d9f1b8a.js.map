{"version":3,"file":"accordion.stories-4d9f1b8a.js","sources":["../../src/shared/ui/core/organisms/accordion/accordion-context.ts","../../src/shared/ui/core/organisms/accordion/accordion.tsx","../../src/shared/ui/core/organisms/accordion/accordion-collapse.tsx","../../src/shared/ui/core/organisms/accordion/accordion-item-context.ts","../../src/shared/ui/core/organisms/accordion/accordion-body.tsx","../../src/shared/ui/core/organisms/accordion/accordion-header.tsx","../../src/shared/ui/core/organisms/accordion/accordion-item.tsx","../../src/shared/ui/core/organisms/accordion/index.ts"],"sourcesContent":["import { SyntheticEvent, createContext } from \"react\"\n\nexport type AccordionEventKey = string | string[] | null | undefined\n\nexport declare type AccordionSelectCallback = (\n  eventKey: AccordionEventKey,\n  r: SyntheticEvent<unknown>,\n) => void\n\nexport type AccordionContextValue = {\n  activeEventKey?: AccordionEventKey,\n  onSelect?: AccordionSelectCallback,\n  alwaysOpen?: boolean,\n}\n\nexport const isAccordionItemSelected = (\n  activeKey: AccordionEventKey,\n  eventKey: string,\n) => Array.isArray(activeKey) ? activeKey.includes(eventKey) : activeKey === eventKey\n\nconst AccordionContext = createContext<AccordionContextValue>({})\n\nexport default AccordionContext\n","import { ReactNode, SyntheticEvent, forwardRef, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport AccordionContext, { AccordionContextValue, AccordionEventKey, AccordionSelectCallback } from \"./accordion-context\";\n\nexport type TAccordion = {\n  activeKey?: AccordionEventKey,\n  defaultActiveKey?: AccordionEventKey,\n  onSelect?: AccordionSelectCallback,\n  alwaysOpen?: boolean,\n  children?: ReactNode\n}\n\nconst Accordion = forwardRef<HTMLDivElement, TAccordion>(({\n  onSelect,\n  activeKey,\n  alwaysOpen,\n  defaultActiveKey,\n  children,\n  ...props\n}, ref) => {\n  const [key, setKey] = useState(defaultActiveKey ? defaultActiveKey : activeKey)\n  const selectHandler = (passedKey: AccordionEventKey, e: SyntheticEvent<unknown>) => {\n    setKey(passedKey)\n    onSelect?.(passedKey, e)\n  }\n  const contextValue = useMemo<AccordionContextValue>(() => ({\n    alwaysOpen,\n    onSelect: selectHandler,\n    activeEventKey: key\n  }), [key, selectHandler, onSelect, alwaysOpen])\n  return (\n    <AccordionContext.Provider value={contextValue}>\n      <Wrapper ref={ref} {...props}>\n        {children}\n      </Wrapper>\n    </AccordionContext.Provider>\n  );\n});\n\nconst Wrapper = styled.div`\n\n`\n\nexport default Accordion\n","import { Children, ReactNode, forwardRef, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport AccordionContext, { isAccordionItemSelected } from \"./accordion-context\";\n\nexport type TAccordionCollapse = {\n  children: ReactNode,\n  eventKey: string,\n}\n\nconst AccordionCollapse = forwardRef<HTMLDivElement, TAccordionCollapse>(({\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const { activeEventKey } = useContext(AccordionContext)\n  return (\n    <Collapse\n      ref={ref}\n      active={isAccordionItemSelected(activeEventKey, eventKey)}\n      {...props}>\n      {Children.only(children)}\n    </Collapse>\n  );\n});\n\n\ntype TCollapse = {\n  active: boolean\n}\n\nconst Collapse = styled.div<TCollapse>`\n  display: grid;\n  grid-template-rows: ${({ active }) => active ? '1fr' : '0fr'};\n  width: 100%;\n  overflow: hidden;\n  transition: grid-template-rows 0.2s ease-out;\n`\nexport default AccordionCollapse\n","import { createContext } from \"react\"\n\nexport type AccordioItemContextValue = {\n  eventKey: string,\n}\n\nconst AccordionItemContext = createContext<AccordioItemContextValue>({\n  eventKey: '',\n})\n\nexport default AccordionItemContext\n","import { ReactNode, forwardRef, useContext } from \"react\";\nimport AccordionCollapse from \"./accordion-collapse\";\nimport styled from \"styled-components\";\nimport AccordionItemContext from \"./accordion-item-context\";\n\nexport type TAccordionBody = {\n  children: ReactNode\n}\n\nconst AccordionBody = forwardRef<HTMLDivElement, TAccordionBody>(({\n  children,\n  ...props\n}, ref) => {\n  const { eventKey } = useContext(AccordionItemContext)\n  return (\n    <AccordionCollapse\n      eventKey={eventKey}>\n      <Wrapper\n        ref={ref}\n        {...props}>\n        {children}\n      </Wrapper>\n    </AccordionCollapse>\n  );\n})\n\nconst Wrapper = styled.div`\n  min-height: 0;\n`\n\nexport default AccordionBody\n","import { ReactNode, SyntheticEvent, forwardRef, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport AccordionContext, { AccordionEventKey, isAccordionItemSelected } from \"./accordion-context\";\nimport { IconButton } from \"../../molecules\";\nimport AccordionItemContext from \"./accordion-item-context\";\n\nexport type TAccordionHeader = {\n  children: ReactNode,\n  showButton?: boolean,\n  onlyButtonClick?: boolean,\n  onClick?: () => void,\n  onActive?: () => void\n}\n\nconst AccordionHeader = forwardRef<HTMLDivElement, TAccordionHeader>(({\n  children,\n  showButton = true,\n  onlyButtonClick = false,\n  onClick,\n  onActive,\n  ...props\n}, ref) => {\n  const { eventKey } = useContext(AccordionItemContext)\n  const accordionOnClick = accordionClick(eventKey, onClick)\n  const { activeEventKey } = useContext(AccordionContext)\n  useEffect(() => {\n    if (Array.isArray(activeEventKey)\n      ? activeEventKey.includes(eventKey)\n      : eventKey === activeEventKey) {\n      onActive?.()\n    }\n  }, [eventKey, activeEventKey, onActive])\n  return (\n    <Wrapper\n      ref={ref}\n      onClick={accordionOnClick}\n      {...props}\n    >\n      <ContentWrapper>\n        {children}\n      </ContentWrapper>\n      {showButton && (\n        <AccordionButton\n          icon=\"chevronDown\"\n          form=\"square\"\n          variant=\"tonal\"\n          isCollapsed={isAccordionItemSelected(activeEventKey, eventKey)}\n          onClick={() => accordionOnClick}\n        />\n      )}\n    </Wrapper>\n  );\n});\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n`\n\nconst ContentWrapper = styled.div`\n\n`\ntype TButton = {\n  isCollapsed: boolean\n}\nconst AccordionButton = styled(IconButton) <TButton>`\n  & svg {\n    transform: ${({ isCollapsed }) => isCollapsed && `rotate(360deg)`};\n  }\n`\n\ntype EventHandler = React.EventHandler<SyntheticEvent>\n\nconst accordionClick = (eventKey: string, onClick?: EventHandler): EventHandler => {\n  const { activeEventKey, alwaysOpen, onSelect } = useContext(AccordionContext)\n  return (e) => {\n    let eventKeyPassed: AccordionEventKey = eventKey === activeEventKey ? null : eventKey\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey)\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey]\n        }\n      } else {\n        eventKeyPassed = [eventKey]\n      }\n    }\n    onSelect?.(eventKeyPassed, e)\n    onClick?.(e)\n  }\n}\n\nexport default AccordionHeader\n","import styled from \"styled-components\";\nimport AccordionItemContext, { AccordioItemContextValue } from \"./accordion-item-context\";\nimport { ReactNode, forwardRef, useMemo } from \"react\";\n\nexport type TAccordionItem = {\n  eventKey: string,\n  children: ReactNode\n}\n\nconst AccordionItem = forwardRef<HTMLDivElement, TAccordionItem>(({\n  eventKey,\n  children,\n  ...props\n}, ref) => {\n  const contextValue = useMemo<AccordioItemContextValue>(() => ({\n    eventKey\n  }), [eventKey])\n  return (\n    <AccordionItemContext.Provider value={contextValue}>\n      <Wrapper ref={ref} {...props}>\n        {children}\n      </Wrapper>\n    </AccordionItemContext.Provider>\n  );\n});\n\nconst Wrapper = styled.div`\n\n`\n\nexport default AccordionItem\n","import Accordion from \"./accordion\";\nimport AccordionBody from \"./accordion-body\";\nimport AccordionCollapse from \"./accordion-collapse\";\nimport AccordionHeader from \"./accordion-header\";\nimport AccordionItem from \"./accordion-item\";\n\nexport default Object.assign(Accordion, {\n  Header: AccordionHeader,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Body: AccordionBody,\n})\n"],"names":["isAccordionItemSelected","activeKey","eventKey","AccordionContext","createContext","Accordion","forwardRef","onSelect","alwaysOpen","defaultActiveKey","children","props","ref","key","setKey","useState","selectHandler","passedKey","e","contextValue","useMemo","jsx","Wrapper","styled","AccordionCollapse","activeEventKey","useContext","Collapse","Children","active","AccordionItemContext","AccordionBody","AccordionHeader","showButton","onlyButtonClick","onClick","onActive","accordionOnClick","accordionClick","useEffect","jsxs","ContentWrapper","AccordionButton","IconButton","isCollapsed","eventKeyPassed","k","AccordionItem"],"mappings":"4kBAeO,MAAMA,EAA0B,CACrCC,EACAC,IACG,MAAM,QAAQD,CAAS,EAAIA,EAAU,SAASC,CAAQ,EAAID,IAAcC,EAEvEC,EAAmBC,EAAqC,cAAA,EAAE,ECRhEC,EAAAC,EAAA,WAAA,CAAA,CAA0D,SAAAC,EACxD,UAAAN,EACA,WAAAO,EACA,iBAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,EAAAC,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAN,GAAAR,CAAA,EACAe,EAAA,CAAAC,EAAAC,IAAA,CACEJ,EAAAG,CAAA,EACAV,GAAA,MAAAA,EAAAU,EAAAC,EAAuB,EAEzBC,EAAAC,EAAAA,QAAA,KAAA,CAA2D,WAAAZ,EACzD,SAAAQ,EACU,eAAAH,CACM,GAAA,CAAAA,EAAAG,EAAAT,EAAAC,CAAA,CAAA,EAElB,OAAAa,EAAAA,IAAAlB,EAAA,SAAA,CAAA,MAAAgB,EAAA,SAAAE,EAAA,IAAAC,EAAA,CAAA,IAAAV,EAAA,GAAAD,EAAA,SAAAD,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EAEAY,EAAAC,EAAA;AAAA;AAAA,yiBC9BA,MAAAC,EAAAlB,EAAA,WAAA,CAAA,CAA0E,SAAAI,EACxE,SAAAR,EACA,GAAAS,CAEF,EAAAC,IAAA,CACE,KAAA,CAAA,eAAAa,CAAA,EAAAC,EAAA,WAAAvB,CAAA,EACA,OAAAkB,EAAA,IACEM,EAAC,CAAA,IAAAf,EACC,OAAAZ,EAAAyB,EAAAvB,CAAA,EACwD,GAAAS,EACpD,SAAAiB,EAAAA,SAAA,KAAAlB,CAAA,CACmB,CAAA,CAG7B,CAAA,EAOAiB,EAAAJ,EAAA;AAAA;AAAA,wBAAwB,CAAA,CAAA,OAAAM,CAAA,IAAAA,EAAA,MAAA;AAAA;AAAA;AAAA;AAAA,oPCxBxB,MAAMC,EAAuB1B,EAAAA,cAAwC,CACnE,SAAU,EACZ,CAAC,ECCD2B,EAAAzB,EAAA,WAAA,CAAA,CAAkE,SAAAI,EAChE,GAAAC,CAEF,EAAAC,IAAA,CACE,KAAA,CAAA,SAAAV,CAAA,EAAAwB,EAAA,WAAAI,CAAA,EACA,OAAAT,EAAA,IACEG,EAAC,CAAA,SAAAtB,EACC,SAAAmB,EAAA,IACAC,EAAC,CAAA,IAAAV,EACC,GAAAD,EACI,SAAAD,CACH,CAAA,CACH,CAAA,CAGN,CAAA,EAEAY,EAAAC,EAAA;AAAA;AAAA,wICZA,MAAAS,EAAA1B,EAAA,WAAA,CAAA,CAAsE,SAAAI,EACpE,WAAAuB,EAAA,GACa,gBAAAC,EAAA,GACK,QAAAC,EAClB,SAAAC,EACA,GAAAzB,CAEF,EAAAC,IAAA,CACE,KAAA,CAAA,SAAAV,CAAA,EAAAwB,EAAA,WAAAI,CAAA,EACAO,EAAAC,EAAApC,EAAAiC,CAAA,EACA,CAAA,eAAAV,CAAA,EAAAC,EAAA,WAAAvB,CAAA,EACAoC,OAAAA,EAAAA,UAAA,IAAA,EACE,MAAA,QAAAd,CAAA,EAAAA,EAAA,SAAAvB,CAAA,EAAAA,IAAAuB,KAGEW,GAAA,MAAAA,IACF,EAAA,CAAAlC,EAAAuB,EAAAW,CAAA,CAAA,EAEFI,EAAA,KACElB,EAAC,CAAA,IAAAV,EACC,QAAAyB,EACS,GAAA1B,EACL,SAAA,CAEJU,MAAAoB,EAAA,CAAA,SAAA/B,EAAA,EAEAuB,GAAAZ,EAAA,IAEEqB,EAAC,CAAA,KAAA,cACM,KAAA,SACA,QAAA,QACG,YAAA1C,EAAAyB,EAAAvB,CAAA,EACqD,QAAA,IAAAmC,CAC9C,CAAA,CACjB,CAAA,CAAA,CAIR,CAAA,EAEAf,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOAkB,EAAAlB,EAAA;AAAA;AAAA,EAMAmB,EAAAnB,EAAAoB,CAAA;AAAA;AAAA,iBAAyC,CAAA,CAAA,YAAAC,CAAA,IAAAA,GAAA;AAAA;AAAA,EAQzCN,EAAA,CAAApC,EAAAiC,IAAA,CACE,KAAA,CAAA,eAAAV,EAAA,WAAAjB,EAAA,SAAAD,CAAA,EAAAmB,EAAAA,WAAAvB,CAAA,EACA,OAAAe,GAAA,CACE,IAAA2B,EAAA3C,IAAAuB,EAAA,KAAAvB,EACAM,IACE,MAAA,QAAAiB,CAAA,EACEA,EAAA,SAAAvB,CAAA,EACE2C,EAAApB,EAAA,OAAAqB,GAAAA,IAAA5C,CAAA,EAEA2C,EAAA,CAAA,GAAApB,EAAAvB,CAAA,EAGF2C,EAAA,CAAA3C,CAAA,GAGJK,GAAA,MAAAA,EAAAsC,EAAA3B,GACAiB,GAAA,MAAAA,EAAAjB,EAAW,CAEf,sjBCpFA,MAAA6B,EAAAzC,EAAA,WAAA,CAAA,CAAkE,SAAAJ,EAChE,SAAAQ,EACA,GAAAC,CAEF,EAAAC,IAAA,CACE,MAAAO,EAAAC,EAAAA,QAAA,KAAA,CAA8D,SAAAlB,CAC5D,GAAA,CAAAA,CAAA,CAAA,EAEF,OAAAmB,EAAAA,IAAAS,EAAA,SAAA,CAAA,MAAAX,EAAA,SAAAE,EAAA,IAAAC,EAAA,CAAA,IAAAV,EAAA,GAAAD,EAAA,SAAAD,CAAA,CAAA,CAAA,CAAA,CAOF,CAAA,EAEAY,EAAAC,EAAA;AAAA;AAAA,oOCpBA,MAAAlB,EAAe,OAAO,OAAOA,EAAW,CACtC,OAAQ2B,EACR,SAAUR,EACV,KAAMuB,EACN,KAAMhB,CACR,CAAC;;;"}